[{"name": "app.py", "content": "# PyShiny Imports\nfrom shiny import reactive, render\nfrom shiny.express import ui, input\nfrom shinyswatch import theme\n\n# Python Standard Library Imports\nimport random\nfrom datetime import datetime\nfrom collections import deque\nimport plotly.express as px\nfrom shinywidgets import render_plotly\nfrom scipy import stats\n\n# Pandas import for data\nimport pandas as pd\nimport seaborn as sns\n\n# Icons import\nfrom faicons import icon_svg\n\nfrom urllib.request import urlopen\nfrom PIL import Image\n\n# ----------------------------------------------------------------------------------\n # Seaborn Datafile: https://github.com/mwaskom/seaborn-data/blob/master/geyser.csv\n# ----------------------------------------------------------------------------------\n\ndf = sns.load_dataset(\"geyser\")\n\ntheme.sandstone\n\n# Reactive calc to be called by UI output components\n@reactive.calc\ndef filtered_select_data():\n    kindMatch = df[\"kind\"].isin(input.input_select())\n    return df[kindMatch]\n\n# UI Page Layout\nui.page_opts(title=\"Geyser Activity\", fillable=True)\n\n# UI Page Inputs\n\n\n# UI Sidebar\nwith ui.sidebar(open=\"open\"):\n\n    # https://shiny.posit.co/py/components/inputs/select-single/\n    ui.input_select(\n    \"select\",\n    \"Select Duration Type\",\n    {\"Long\":\"Long\",\"Short\":\"Short\"}\n    )\n\n    ui.hr()\n\n    # https://shiny.posit.co/py/components/inputs/slider/\n    ui.input_slider(\n        \"slider\",\n        \"Select Wait Time Range\",\n        0,100,50\n    )\n\n    ui.h2()\n    \n    @render.image\n    def image():\n        img = Image.open(urlopen(\"https://static.vecteezy.com/system/resources/previews/000/304/383/original/water-comping-out-of-the-ground-vector.jpg\"))\n\n# UI Main Panel\nwith ui.card(full_screen=True, min_height=\"60%\"):\n    ui.card_header(\"Geyser Duration Chart\")\n\n    @render_plotly\n    def display_plot():\n    # Fetch from the reactive calc function\n        #deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n\n        # Ensure the DataFrame is not empty before plotting\n        #if not df.empty:\n            # Convert Time Stamp to datetime for better plotting\n            #df[\"Time Stamp\"] = pd.to_datetime(df[\"Time Stamp\"])\n\n        # Create scatter plot for readings\n        fig = px.scatter(df,\n            x=\"duration\",\n            y=\"waiting\",\n            title=\"Duration and Waiting\",\n            labels={\"duration\": \" seconds\", \"waiting\": \" minutes\"},\n            color_discrete_sequence=[\"black\"] )    \n            \n        # https://shiny.posit.co/py/components/outputs/plot-plotly/\n\n# https://shiny.posit.co/py/components/outputs/data-grid/\nwith ui.card(full_screen=True, min_height=\"40%\"):\n    ui.card_header(\"Geyser Activity Data Table\")\n", "type": "text"}]